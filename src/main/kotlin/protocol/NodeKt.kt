// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: base.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package protocol;

@kotlin.jvm.JvmName("-initializenode")
public inline fun node(block: protocol.NodeKt.Dsl.() -> kotlin.Unit): protocol.Base.Node =
  protocol.NodeKt.Dsl._create(protocol.Base.Node.newBuilder()).apply { block() }._build()
/**
 * ```
 * Node, Expression, and Statement will be represented as wrappers with a "oneof" for their specific types
 * ```
 *
 * Protobuf type `protocol.Node`
 */
public object NodeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: protocol.Base.Node.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: protocol.Base.Node.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): protocol.Base.Node = _builder.build()

    /**
     * `.protocol.Expression expression = 1;`
     */
    public var expression: protocol.Expressions.Expression
      @JvmName("getExpression")
      get() = _builder.getExpression()
      @JvmName("setExpression")
      set(value) {
        _builder.setExpression(value)
      }
    /**
     * `.protocol.Expression expression = 1;`
     */
    public fun clearExpression() {
      _builder.clearExpression()
    }
    /**
     * `.protocol.Expression expression = 1;`
     * @return Whether the expression field is set.
     */
    public fun hasExpression(): kotlin.Boolean {
      return _builder.hasExpression()
    }

    /**
     * `.protocol.Statement statement = 2;`
     */
    public var statement: protocol.Statements.Statement
      @JvmName("getStatement")
      get() = _builder.getStatement()
      @JvmName("setStatement")
      set(value) {
        _builder.setStatement(value)
      }
    /**
     * `.protocol.Statement statement = 2;`
     */
    public fun clearStatement() {
      _builder.clearStatement()
    }
    /**
     * `.protocol.Statement statement = 2;`
     * @return Whether the statement field is set.
     */
    public fun hasStatement(): kotlin.Boolean {
      return _builder.hasStatement()
    }

    /**
     * `.protocol.ProgramFile programFile = 3;`
     */
    public var programFile: protocol.Base.ProgramFile
      @JvmName("getProgramFile")
      get() = _builder.getProgramFile()
      @JvmName("setProgramFile")
      set(value) {
        _builder.setProgramFile(value)
      }
    /**
     * `.protocol.ProgramFile programFile = 3;`
     */
    public fun clearProgramFile() {
      _builder.clearProgramFile()
    }
    /**
     * `.protocol.ProgramFile programFile = 3;`
     * @return Whether the programFile field is set.
     */
    public fun hasProgramFile(): kotlin.Boolean {
      return _builder.hasProgramFile()
    }

    /**
     * `.protocol.IfBlock ifBlock = 4;`
     */
    public var ifBlock: protocol.Statements.IfBlock
      @JvmName("getIfBlock")
      get() = _builder.getIfBlock()
      @JvmName("setIfBlock")
      set(value) {
        _builder.setIfBlock(value)
      }
    /**
     * `.protocol.IfBlock ifBlock = 4;`
     */
    public fun clearIfBlock() {
      _builder.clearIfBlock()
    }
    /**
     * `.protocol.IfBlock ifBlock = 4;`
     * @return Whether the ifBlock field is set.
     */
    public fun hasIfBlock(): kotlin.Boolean {
      return _builder.hasIfBlock()
    }

    /**
     * `.protocol.ForCondition forCondition = 5;`
     */
    public var forCondition: protocol.Statements.ForCondition
      @JvmName("getForCondition")
      get() = _builder.getForCondition()
      @JvmName("setForCondition")
      set(value) {
        _builder.setForCondition(value)
      }
    /**
     * `.protocol.ForCondition forCondition = 5;`
     */
    public fun clearForCondition() {
      _builder.clearForCondition()
    }
    /**
     * `.protocol.ForCondition forCondition = 5;`
     * @return Whether the forCondition field is set.
     */
    public fun hasForCondition(): kotlin.Boolean {
      return _builder.hasForCondition()
    }

    /**
     * `.protocol.ItemDefinition itemDefinition = 6;`
     */
    public var itemDefinition: protocol.Statements.ItemDefinition
      @JvmName("getItemDefinition")
      get() = _builder.getItemDefinition()
      @JvmName("setItemDefinition")
      set(value) {
        _builder.setItemDefinition(value)
      }
    /**
     * `.protocol.ItemDefinition itemDefinition = 6;`
     */
    public fun clearItemDefinition() {
      _builder.clearItemDefinition()
    }
    /**
     * `.protocol.ItemDefinition itemDefinition = 6;`
     * @return Whether the itemDefinition field is set.
     */
    public fun hasItemDefinition(): kotlin.Boolean {
      return _builder.hasItemDefinition()
    }

    /**
     * `.protocol.Parameter parameter = 7;`
     */
    public var parameter: protocol.Statements.Parameter
      @JvmName("getParameter")
      get() = _builder.getParameter()
      @JvmName("setParameter")
      set(value) {
        _builder.setParameter(value)
      }
    /**
     * `.protocol.Parameter parameter = 7;`
     */
    public fun clearParameter() {
      _builder.clearParameter()
    }
    /**
     * `.protocol.Parameter parameter = 7;`
     * @return Whether the parameter field is set.
     */
    public fun hasParameter(): kotlin.Boolean {
      return _builder.hasParameter()
    }
    public val subtypeCase: protocol.Base.Node.SubtypeCase
      @JvmName("getSubtypeCase")
      get() = _builder.getSubtypeCase()

    public fun clearSubtype() {
      _builder.clearSubtype()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun protocol.Base.Node.copy(block: `protocol`.NodeKt.Dsl.() -> kotlin.Unit): protocol.Base.Node =
  `protocol`.NodeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val protocol.Base.NodeOrBuilder.expressionOrNull: protocol.Expressions.Expression?
  get() = if (hasExpression()) getExpression() else null

public val protocol.Base.NodeOrBuilder.statementOrNull: protocol.Statements.Statement?
  get() = if (hasStatement()) getStatement() else null

public val protocol.Base.NodeOrBuilder.programFileOrNull: protocol.Base.ProgramFile?
  get() = if (hasProgramFile()) getProgramFile() else null

public val protocol.Base.NodeOrBuilder.ifBlockOrNull: protocol.Statements.IfBlock?
  get() = if (hasIfBlock()) getIfBlock() else null

public val protocol.Base.NodeOrBuilder.forConditionOrNull: protocol.Statements.ForCondition?
  get() = if (hasForCondition()) getForCondition() else null

public val protocol.Base.NodeOrBuilder.itemDefinitionOrNull: protocol.Statements.ItemDefinition?
  get() = if (hasItemDefinition()) getItemDefinition() else null

public val protocol.Base.NodeOrBuilder.parameterOrNull: protocol.Statements.Parameter?
  get() = if (hasParameter()) getParameter() else null

