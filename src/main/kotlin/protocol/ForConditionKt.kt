// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: statements.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package protocol;

@kotlin.jvm.JvmName("-initializeforCondition")
public inline fun forCondition(block: protocol.ForConditionKt.Dsl.() -> kotlin.Unit): protocol.Statements.ForCondition =
  protocol.ForConditionKt.Dsl._create(protocol.Statements.ForCondition.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `protocol.ForCondition`
 */
public object ForConditionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: protocol.Statements.ForCondition.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: protocol.Statements.ForCondition.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): protocol.Statements.ForCondition = _builder.build()

    /**
     * `.protocol.StandardForCondition standardForCondition = 1;`
     */
    public var standardForCondition: protocol.Statements.StandardForCondition
      @JvmName("getStandardForCondition")
      get() = _builder.getStandardForCondition()
      @JvmName("setStandardForCondition")
      set(value) {
        _builder.setStandardForCondition(value)
      }
    /**
     * `.protocol.StandardForCondition standardForCondition = 1;`
     */
    public fun clearStandardForCondition() {
      _builder.clearStandardForCondition()
    }
    /**
     * `.protocol.StandardForCondition standardForCondition = 1;`
     * @return Whether the standardForCondition field is set.
     */
    public fun hasStandardForCondition(): kotlin.Boolean {
      return _builder.hasStandardForCondition()
    }

    /**
     * `.protocol.ForEachCondition forEachCondition = 2;`
     */
    public var forEachCondition: protocol.Statements.ForEachCondition
      @JvmName("getForEachCondition")
      get() = _builder.getForEachCondition()
      @JvmName("setForEachCondition")
      set(value) {
        _builder.setForEachCondition(value)
      }
    /**
     * `.protocol.ForEachCondition forEachCondition = 2;`
     */
    public fun clearForEachCondition() {
      _builder.clearForEachCondition()
    }
    /**
     * `.protocol.ForEachCondition forEachCondition = 2;`
     * @return Whether the forEachCondition field is set.
     */
    public fun hasForEachCondition(): kotlin.Boolean {
      return _builder.hasForEachCondition()
    }
    public val conditionCase: protocol.Statements.ForCondition.ConditionCase
      @JvmName("getConditionCase")
      get() = _builder.getConditionCase()

    public fun clearCondition() {
      _builder.clearCondition()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun protocol.Statements.ForCondition.copy(block: `protocol`.ForConditionKt.Dsl.() -> kotlin.Unit): protocol.Statements.ForCondition =
  `protocol`.ForConditionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val protocol.Statements.ForConditionOrBuilder.standardForConditionOrNull: protocol.Statements.StandardForCondition?
  get() = if (hasStandardForCondition()) getStandardForCondition() else null

public val protocol.Statements.ForConditionOrBuilder.forEachConditionOrNull: protocol.Statements.ForEachCondition?
  get() = if (hasForEachCondition()) getForEachCondition() else null

