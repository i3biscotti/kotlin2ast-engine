// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: statements.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package protocol;

@kotlin.jvm.JvmName("-initializeforInitOrIncrementStatement")
public inline fun forInitOrIncrementStatement(block: protocol.ForInitOrIncrementStatementKt.Dsl.() -> kotlin.Unit): protocol.Statements.ForInitOrIncrementStatement =
  protocol.ForInitOrIncrementStatementKt.Dsl._create(protocol.Statements.ForInitOrIncrementStatement.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `protocol.ForInitOrIncrementStatement`
 */
public object ForInitOrIncrementStatementKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: protocol.Statements.ForInitOrIncrementStatement.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: protocol.Statements.ForInitOrIncrementStatement.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): protocol.Statements.ForInitOrIncrementStatement = _builder.build()

    /**
     * `.protocol.VarDeclarationForStatement varDeclarationForStatement = 1;`
     */
    public var varDeclarationForStatement: protocol.Statements.VarDeclarationForStatement
      @JvmName("getVarDeclarationForStatement")
      get() = _builder.getVarDeclarationForStatement()
      @JvmName("setVarDeclarationForStatement")
      set(value) {
        _builder.setVarDeclarationForStatement(value)
      }
    /**
     * `.protocol.VarDeclarationForStatement varDeclarationForStatement = 1;`
     */
    public fun clearVarDeclarationForStatement() {
      _builder.clearVarDeclarationForStatement()
    }
    /**
     * `.protocol.VarDeclarationForStatement varDeclarationForStatement = 1;`
     * @return Whether the varDeclarationForStatement field is set.
     */
    public fun hasVarDeclarationForStatement(): kotlin.Boolean {
      return _builder.hasVarDeclarationForStatement()
    }

    /**
     * `.protocol.AssignmentForStatement assignmentForStatement = 2;`
     */
    public var assignmentForStatement: protocol.Statements.AssignmentForStatement
      @JvmName("getAssignmentForStatement")
      get() = _builder.getAssignmentForStatement()
      @JvmName("setAssignmentForStatement")
      set(value) {
        _builder.setAssignmentForStatement(value)
      }
    /**
     * `.protocol.AssignmentForStatement assignmentForStatement = 2;`
     */
    public fun clearAssignmentForStatement() {
      _builder.clearAssignmentForStatement()
    }
    /**
     * `.protocol.AssignmentForStatement assignmentForStatement = 2;`
     * @return Whether the assignmentForStatement field is set.
     */
    public fun hasAssignmentForStatement(): kotlin.Boolean {
      return _builder.hasAssignmentForStatement()
    }

    /**
     * `.protocol.ExpressionForStatement expressionForStatement = 3;`
     */
    public var expressionForStatement: protocol.Statements.ExpressionForStatement
      @JvmName("getExpressionForStatement")
      get() = _builder.getExpressionForStatement()
      @JvmName("setExpressionForStatement")
      set(value) {
        _builder.setExpressionForStatement(value)
      }
    /**
     * `.protocol.ExpressionForStatement expressionForStatement = 3;`
     */
    public fun clearExpressionForStatement() {
      _builder.clearExpressionForStatement()
    }
    /**
     * `.protocol.ExpressionForStatement expressionForStatement = 3;`
     * @return Whether the expressionForStatement field is set.
     */
    public fun hasExpressionForStatement(): kotlin.Boolean {
      return _builder.hasExpressionForStatement()
    }
    public val initOrIncrementCase: protocol.Statements.ForInitOrIncrementStatement.InitOrIncrementCase
      @JvmName("getInitOrIncrementCase")
      get() = _builder.getInitOrIncrementCase()

    public fun clearInitOrIncrement() {
      _builder.clearInitOrIncrement()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun protocol.Statements.ForInitOrIncrementStatement.copy(block: `protocol`.ForInitOrIncrementStatementKt.Dsl.() -> kotlin.Unit): protocol.Statements.ForInitOrIncrementStatement =
  `protocol`.ForInitOrIncrementStatementKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val protocol.Statements.ForInitOrIncrementStatementOrBuilder.varDeclarationForStatementOrNull: protocol.Statements.VarDeclarationForStatement?
  get() = if (hasVarDeclarationForStatement()) getVarDeclarationForStatement() else null

public val protocol.Statements.ForInitOrIncrementStatementOrBuilder.assignmentForStatementOrNull: protocol.Statements.AssignmentForStatement?
  get() = if (hasAssignmentForStatement()) getAssignmentForStatement() else null

public val protocol.Statements.ForInitOrIncrementStatementOrBuilder.expressionForStatementOrNull: protocol.Statements.ExpressionForStatement?
  get() = if (hasExpressionForStatement()) getExpressionForStatement() else null

