// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: statements.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package protocol;

@kotlin.jvm.JvmName("-initializeifBlock")
public inline fun ifBlock(block: protocol.IfBlockKt.Dsl.() -> kotlin.Unit): protocol.Statements.IfBlock =
  protocol.IfBlockKt.Dsl._create(protocol.Statements.IfBlock.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `protocol.IfBlock`
 */
public object IfBlockKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: protocol.Statements.IfBlock.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: protocol.Statements.IfBlock.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): protocol.Statements.IfBlock = _builder.build()

    /**
     * `.protocol.Expression condition = 1;`
     */
    public var condition: protocol.Expressions.Expression
      @JvmName("getCondition")
      get() = _builder.getCondition()
      @JvmName("setCondition")
      set(value) {
        _builder.setCondition(value)
      }
    /**
     * `.protocol.Expression condition = 1;`
     */
    public fun clearCondition() {
      _builder.clearCondition()
    }
    /**
     * `.protocol.Expression condition = 1;`
     * @return Whether the condition field is set.
     */
    public fun hasCondition(): kotlin.Boolean {
      return _builder.hasCondition()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class StatementsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .protocol.Statement statements = 2;`
     */
     public val statements: com.google.protobuf.kotlin.DslList<protocol.Statements.Statement, StatementsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getStatementsList()
      )
    /**
     * `repeated .protocol.Statement statements = 2;`
     * @param value The statements to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addStatements")
    public fun com.google.protobuf.kotlin.DslList<protocol.Statements.Statement, StatementsProxy>.add(value: protocol.Statements.Statement) {
      _builder.addStatements(value)
    }
    /**
     * `repeated .protocol.Statement statements = 2;`
     * @param value The statements to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignStatements")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<protocol.Statements.Statement, StatementsProxy>.plusAssign(value: protocol.Statements.Statement) {
      add(value)
    }
    /**
     * `repeated .protocol.Statement statements = 2;`
     * @param values The statements to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllStatements")
    public fun com.google.protobuf.kotlin.DslList<protocol.Statements.Statement, StatementsProxy>.addAll(values: kotlin.collections.Iterable<protocol.Statements.Statement>) {
      _builder.addAllStatements(values)
    }
    /**
     * `repeated .protocol.Statement statements = 2;`
     * @param values The statements to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllStatements")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<protocol.Statements.Statement, StatementsProxy>.plusAssign(values: kotlin.collections.Iterable<protocol.Statements.Statement>) {
      addAll(values)
    }
    /**
     * `repeated .protocol.Statement statements = 2;`
     * @param index The index to set the value at.
     * @param value The statements to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setStatements")
    public operator fun com.google.protobuf.kotlin.DslList<protocol.Statements.Statement, StatementsProxy>.set(index: kotlin.Int, value: protocol.Statements.Statement) {
      _builder.setStatements(index, value)
    }
    /**
     * `repeated .protocol.Statement statements = 2;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearStatements")
    public fun com.google.protobuf.kotlin.DslList<protocol.Statements.Statement, StatementsProxy>.clear() {
      _builder.clearStatements()
    }


    /**
     * `.protocol.BlockType blockType = 3;`
     */
    public var blockType: protocol.Statements.BlockType
      @JvmName("getBlockType")
      get() = _builder.getBlockType()
      @JvmName("setBlockType")
      set(value) {
        _builder.setBlockType(value)
      }
    public var blockTypeValue: kotlin.Int
      @JvmName("getBlockTypeValue")
      get() = _builder.getBlockTypeValue()
      @JvmName("setBlockTypeValue")
      set(value) {
        _builder.setBlockTypeValue(value)
      }
    /**
     * `.protocol.BlockType blockType = 3;`
     */
    public fun clearBlockType() {
      _builder.clearBlockType()
    }

    /**
     * `optional .protocol.Position position = 4;`
     */
    public var position: protocol.PositionOuterClass.Position
      @JvmName("getPosition")
      get() = _builder.getPosition()
      @JvmName("setPosition")
      set(value) {
        _builder.setPosition(value)
      }
    /**
     * `optional .protocol.Position position = 4;`
     */
    public fun clearPosition() {
      _builder.clearPosition()
    }
    /**
     * `optional .protocol.Position position = 4;`
     * @return Whether the position field is set.
     */
    public fun hasPosition(): kotlin.Boolean {
      return _builder.hasPosition()
    }
    public val IfBlockKt.Dsl.positionOrNull: protocol.PositionOuterClass.Position?
      get() = _builder.positionOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun protocol.Statements.IfBlock.copy(block: `protocol`.IfBlockKt.Dsl.() -> kotlin.Unit): protocol.Statements.IfBlock =
  `protocol`.IfBlockKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val protocol.Statements.IfBlockOrBuilder.conditionOrNull: protocol.Expressions.Expression?
  get() = if (hasCondition()) getCondition() else null

public val protocol.Statements.IfBlockOrBuilder.positionOrNull: protocol.PositionOuterClass.Position?
  get() = if (hasPosition()) getPosition() else null

