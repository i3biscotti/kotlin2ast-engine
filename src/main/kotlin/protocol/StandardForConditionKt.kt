// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: statements.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package protocol;

@kotlin.jvm.JvmName("-initializestandardForCondition")
public inline fun standardForCondition(block: protocol.StandardForConditionKt.Dsl.() -> kotlin.Unit): protocol.Statements.StandardForCondition =
  protocol.StandardForConditionKt.Dsl._create(protocol.Statements.StandardForCondition.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `protocol.StandardForCondition`
 */
public object StandardForConditionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: protocol.Statements.StandardForCondition.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: protocol.Statements.StandardForCondition.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): protocol.Statements.StandardForCondition = _builder.build()

    /**
     * `.protocol.ForInitOrIncrementStatement initStatement = 1;`
     */
    public var initStatement: protocol.Statements.ForInitOrIncrementStatement
      @JvmName("getInitStatement")
      get() = _builder.getInitStatement()
      @JvmName("setInitStatement")
      set(value) {
        _builder.setInitStatement(value)
      }
    /**
     * `.protocol.ForInitOrIncrementStatement initStatement = 1;`
     */
    public fun clearInitStatement() {
      _builder.clearInitStatement()
    }
    /**
     * `.protocol.ForInitOrIncrementStatement initStatement = 1;`
     * @return Whether the initStatement field is set.
     */
    public fun hasInitStatement(): kotlin.Boolean {
      return _builder.hasInitStatement()
    }

    /**
     * `.protocol.Expression controlExpression = 2;`
     */
    public var controlExpression: protocol.Expressions.Expression
      @JvmName("getControlExpression")
      get() = _builder.getControlExpression()
      @JvmName("setControlExpression")
      set(value) {
        _builder.setControlExpression(value)
      }
    /**
     * `.protocol.Expression controlExpression = 2;`
     */
    public fun clearControlExpression() {
      _builder.clearControlExpression()
    }
    /**
     * `.protocol.Expression controlExpression = 2;`
     * @return Whether the controlExpression field is set.
     */
    public fun hasControlExpression(): kotlin.Boolean {
      return _builder.hasControlExpression()
    }

    /**
     * `.protocol.ForInitOrIncrementStatement incrementStatement = 3;`
     */
    public var incrementStatement: protocol.Statements.ForInitOrIncrementStatement
      @JvmName("getIncrementStatement")
      get() = _builder.getIncrementStatement()
      @JvmName("setIncrementStatement")
      set(value) {
        _builder.setIncrementStatement(value)
      }
    /**
     * `.protocol.ForInitOrIncrementStatement incrementStatement = 3;`
     */
    public fun clearIncrementStatement() {
      _builder.clearIncrementStatement()
    }
    /**
     * `.protocol.ForInitOrIncrementStatement incrementStatement = 3;`
     * @return Whether the incrementStatement field is set.
     */
    public fun hasIncrementStatement(): kotlin.Boolean {
      return _builder.hasIncrementStatement()
    }

    /**
     * `.protocol.Position position = 4;`
     */
    public var position: protocol.PositionOuterClass.Position
      @JvmName("getPosition")
      get() = _builder.getPosition()
      @JvmName("setPosition")
      set(value) {
        _builder.setPosition(value)
      }
    /**
     * `.protocol.Position position = 4;`
     */
    public fun clearPosition() {
      _builder.clearPosition()
    }
    /**
     * `.protocol.Position position = 4;`
     * @return Whether the position field is set.
     */
    public fun hasPosition(): kotlin.Boolean {
      return _builder.hasPosition()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun protocol.Statements.StandardForCondition.copy(block: `protocol`.StandardForConditionKt.Dsl.() -> kotlin.Unit): protocol.Statements.StandardForCondition =
  `protocol`.StandardForConditionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val protocol.Statements.StandardForConditionOrBuilder.initStatementOrNull: protocol.Statements.ForInitOrIncrementStatement?
  get() = if (hasInitStatement()) getInitStatement() else null

public val protocol.Statements.StandardForConditionOrBuilder.controlExpressionOrNull: protocol.Expressions.Expression?
  get() = if (hasControlExpression()) getControlExpression() else null

public val protocol.Statements.StandardForConditionOrBuilder.incrementStatementOrNull: protocol.Statements.ForInitOrIncrementStatement?
  get() = if (hasIncrementStatement()) getIncrementStatement() else null

public val protocol.Statements.StandardForConditionOrBuilder.positionOrNull: protocol.PositionOuterClass.Position?
  get() = if (hasPosition()) getPosition() else null

